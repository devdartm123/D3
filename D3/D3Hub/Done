-- Roblox LocalScript using Rayfield UI library
-- Creates a UI with toggles to record and replay player movements (CFrames) and inputs (mouse clicks, key presses).
-- Includes proximity detection to log interactions with ProximityPrompts (e.g., chests).
-- Playback replays movements and triggers ProximityPrompts when near recorded positions.
-- Note: This is a basic movement and input recorder/replayer. It records CFrames, mouse clicks, key presses, and ProximityPrompt interactions.

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local UserInputService = game:GetService("UserInputService")

local Window = Rayfield:CreateWindow({
    Name = "Action Recorder",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Movement & Input Recorder",
    ConfigurationSaving = {
        Enabled = false,
    }
})

local Tab = Window:CreateTab("ðŸŽ¯MainðŸŽ¯", nil)

local recorded = {} -- Table to store {cframe, delta, input, prompt}
local recording = false
local playing = false
local recordConnection = nil
local inputConnection = nil
local playThread = nil

-- Function to get character's root part
local function getRoot()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        return character.HumanoidRootPart
    end
    return nil
end

-- Function to find nearby ProximityPrompt (within 5 studs)
local function findNearbyPrompt()
    local root = getRoot()
    if not root then return nil end
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") then
            local parent = obj.Parent
            if parent and parent:IsA("BasePart") or parent:IsA("Model") then
                local promptPos = parent:IsA("BasePart") and parent.Position or parent:GetPrimaryPartCFrame().Position
                if (promptPos - root.Position).Magnitude <= 5 then
                    return obj
                end
            end
        end
    end
    return nil
end

-- Toggle for Record
local RecordToggle = Tab:CreateToggle({
    Name = "Record Actions",
    CurrentValue = false,
    Callback = function(Value)
        local root = getRoot()
        if not root then
            Rayfield:Notify({Title = "Error", Content = "Character not loaded!", Duration = 5})
            RecordToggle:Set(false)
            return
        end

        if Value then
            -- Start recording
            recorded = {}
            recording = true
            local lastTime = tick()
            recordConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if recording then
                    local now = tick()
                    local delta = now - lastTime
                    lastTime = now
                    local prompt = findNearbyPrompt()
                    table.insert(recorded, {
                        cframe = root.CFrame,
                        delta = delta,
                        input = nil, -- Will be set by inputConnection if input occurs
                        prompt = prompt and {name = prompt.Parent.Name, position = prompt.Parent:IsA("BasePart") and prompt.Parent.Position or prompt.Parent:GetPrimaryPartCFrame().Position}
                    })
                end
            end)

            -- Record mouse clicks and key presses
            inputConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if recording and not gameProcessed then
                    local inputType = input.UserInputType == Enum.UserInputType.MouseButton1 and "MouseClick" or input.KeyCode.Name
                    if inputType ~= "Unknown" then
                        recorded[#recorded].input = inputType
                    end
                end
            end)

            Rayfield:Notify({Title = "Recording", Content = "Started recording movements, inputs, and proximity prompts.", Duration = 5})
        else
            -- Stop recording
            recording = false
            if recordConnection then
                recordConnection:Disconnect()
                recordConnection = nil
            end
            if inputConnection then
                inputConnection:Disconnect()
                inputConnection = nil
            end
            Rayfield:Notify({Title = "Recording", Content = "Stopped and saved " .. #recorded .. " actions.", Duration = 5})
        end
    end,
})

-- Toggle for Play
local PlayToggle = Tab:CreateToggle({
    Name = "Play Actions",
    CurrentValue = false,
    Callback = function(Value)
        if #recorded == 0 then
            Rayfield:Notify({Title = "Error", Content = "No actions recorded!", Duration = 5})
            PlayToggle:Set(false)
            return
        end

        local root = getRoot()
        if not root then
            Rayfield:Notify({Title = "Error", Content = "Character not loaded!", Duration = 5})
            PlayToggle:Set(false)
            return
        end

        if Value then
            -- Start playing in a loop
            playing = true
            playThread = spawn(function()
                while playing do
                    for _, action in ipairs(recorded) do
                        if not playing then break end
                        root.CFrame = action.cframe
                        if action.input then
                            -- Simulate input (note: actual input simulation is limited in Roblox; notify instead)
                            Rayfield:Notify({Title = "Playback Input", Content = "Simulated input: " .. action.input, Duration = 1})
                        end
                        if action.prompt then
                            -- Check if a ProximityPrompt exists at the recorded position
                            for _, obj in ipairs(workspace:GetDescendants()) do
                                if obj:IsA("ProximityPrompt") and obj.Parent.Name == action.prompt.name then
                                    local promptPos = obj.Parent:IsA("BasePart") and obj.Parent.Position or obj.Parent:GetPrimaryPartCFrame().Position
                                    if (promptPos - action.prompt.position).Magnitude < 1 then
                                        fireproximityprompt(obj)
                                        Rayfield:Notify({Title = "Playback Prompt", Content = "Triggered prompt: " .. action.prompt.name, Duration = 1})
                                        break
                                    end
                                end
                            end
                        end
                        wait(action.delta)
                    end
                end
            end)
            Rayfield:Notify({Title = "Playback", Content = "Started playing actions in loop.", Duration = 5})
        else
            -- Stop playing
            playing = false
            Rayfield:Notify({Title = "Playback", Content = "Stopped playback.", Duration = 5})
        end
    end,
})
